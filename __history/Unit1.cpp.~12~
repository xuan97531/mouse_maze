//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Unit1.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"

#define possible_direction 8
#define S 4
TForm1 *Form1;

int m,n,p,top=-1,d;
int maze[200][200];
int mark[200][200];
int W[200][200]={0};
int starti,startj,endi,endj,success;
struct position*Stack;

struct offset{
	int dx,dy;
};
struct offset move[possible_direction];
/*struct position{
	 int x,y;
	 int dir;
};
struct position{
	 int x,y;
};
struct cood{
	 int dx,dy;
};
struct position step,next,stack[200];
struct cood f1[S];
struct cood f2[S];
int **w;
 */
//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
	 /*Memo1->Clear();
	 move[0].dx = -1; move[0].dy = 0;
	 move[1].dx = -1; move[1].dy = 1;
	 move[2].dx = 0 ; move[2].dy = 1;
	 move[3].dx = 1 ; move[3].dy = 1;
	 move[4].dx = 1 ; move[4].dy = 0;
	 move[5].dx = 1 ; move[5].dy = -1;
	 move[6].dx = 0 ; move[6].dy = -1;
	 move[7].dx = -1; move[7].dy = =1; */
}
//---------------------------------------------------------------------------
/*
void initiation(){
	 f1[0].dx = 0; f1[0].dy = 1;
	 f1[1].dx =-1; f1[1].dy = 0;
	 f1[2].dx = 0; f1[2].dy =-1;
	 f1[3].dx = 1; f1[3].dy = 0;
	 f2[0].dx = 0; f2[0].dy = 2;
	 f2[1].dx =-2; f2[1].dy = 0;
	 f2[2].dx = 0; f2[2].dy =-2;
	 f2[3].dx = 2; f2[3].dy = 0;

}  */
int visit(int i,int j){
	 mark[i][j]=3;
	 if(i==endi&&j==endj) success=1;
	 if(success!=1&&mark[i][j+1]==0) visit(i,j+1);
	 if(success!=1&&mark[i+1][j]==0) visit(i+1,j);
	 if(success!=1&&mark[i][j-1]==0) visit(i,j-1);
	 if(success!=1&&mark[i-1][j]==0) visit(i-1,j);
	 if(success!=1) mark[i][j]==0;
	 return success;
}

void __fastcall TForm1::Button1Click(TObject *Sender)
{
	 int MaxInt,i,j;
	 m = StrToInt(Edit1->Text);
	 n = StrToInt(Edit2->Text);

	 for(i=1;i<=m;i++){
		for(j=1;j<=n;j++){
			W[i][j] = rand()%2+0;
			W[j][i] = W[i][j];
		}
		W[i][j] = MaxInt;
	 }
	 for(i=0;i<m+2;i++)
		 for(j=0;j<n+2;j++){
			 if(j==0||j==n+1) W[i][j]=2;
			 if(i==0||i==m+1) W[i][j]=2;
			 if((i==1&&(j==0||j==1))||(i==m&&(j==n||j==n+1))) W[i][j]=0;
		 }

	 StringGrid1->RowCount = m+2;
	 StringGrid1->ColCount = n+2;
	 for(i=0;i<m+2;i++){
		 for(j=0;j<n+2;j++){
			 StringGrid1->Cells[j][i] = IntToStr(W[i][j]);
		 }
	 }
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Button3Click(TObject *Sender)
{
     FILE *fp;
	 AnsiString out,fname;
	 int i,j;
	 if(OpenDialog1->Execute()){
		fname =OpenDialog1->FileName;
		fp = fopen(fname.c_str(),"r+");
		fscanf(fp,"%d %d",&m,&n);
		endi=m,endj=n;
		Memo1->Lines->Add("m = "+IntToStr(m));
		Memo1->Lines->Add("n = "+IntToStr(n));
		for(i=1;i<=m;i++)
			for(j=1;j<=n;j++){
				fscanf(fp,"%d",&maze[i][j]);
				mark[i][j]=maze[i][j];
			}
		StringGrid1->RowCount = m;
		StringGrid1->ColCount = n;
		Memo1->Lines->Add("----------Maze-----------");
		for(i=1;i<=m;i++){
			out="";
			for(j=1;j<=n;j++){
				out += "  "+IntToStr(maze[i][j]);
			}
			Memo1->Lines->Add(out);
		}
		for(i=1;i<=m;i++){
			for(j=1;j<=n;j++){
				StringGrid1->Cells[j-1][i-1] = maze[i][j];
			}
		}
	 }
	 else Memo1->Lines->Add("Nothing Happens!");
}
//---------------------------------------------------------------------------


void __fastcall TForm1::StringGrid1DrawCell(TObject *Sender, int ACol, int ARow, TRect &Rect,
          TGridDrawState State)
{
	AnsiString text = StringGrid1->Cells[ACol][ARow];
	if (text == "0")
		StringGrid1->Canvas->Brush->Color = TColor RGB(201, 150, 204);
	else if(text == "1")
		StringGrid1->Canvas->Brush->Color = TColor RGB(145, 107, 191);
	else if(text == "2")
		StringGrid1->Canvas->Brush->Color = TColor RGB(61, 44, 141);
		StringGrid1->Canvas->FillRect(Rect);
		StringGrid1->Canvas->TextRect(Rect, Rect.Left+6, Rect.Top+8, text);
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Button6Click(TObject *Sender)
{
	 int i,j;
	 AnsiString out;
	 if(visit(starti,startj)==1){
		Memo1->Lines->Add("no exit");
	 }
	 else{
		Memo1->Lines->Add("----------Mark-----------");
		for(i=1;i<=m;i++){
			out="";
			for(j=1;j<=n;j++){
				out += "  "+IntToStr(mark[i][j]);
			}
			Memo1->Lines->Add(out);
		}
	 }
}
//---------------------------------------------------------------------------
